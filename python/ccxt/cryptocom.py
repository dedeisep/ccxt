# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
import math
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import InvalidNonce


class cryptocom(Exchange):

    def describe(self):
        return self.deep_extend(super(cryptocom, self).describe(), {
            'id': 'cryptocom',
            'name': 'Crypto.com',
            'countries': ['MT'],
            'version': 'v2',
            'rateLimit': 100,
            'has': {
                'cancelAllOrders': True,
                'cancelOrder': True,
                'CORS': False,
                'createOrder': True,
                'fetchCurrencies': False,
                'fetchBalance': True,
                'fetchBidsAsks': False,
                'fetchClosedOrders': 'emulated',
                'fetchDepositAddress': True,
                'fetchDeposits': True,
                'fetchFundingFees': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRates': False,
                'fetchIsolatedPositions': False,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrders': True,
                'fetchOrderBook': True,
                'fetchPositions': False,
                'fetchStatus': False,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransactions': False,
                'fetchWithdrawals': False,
                'setLeverage': False,
                'setMarginMode': False,
                'withdraw': False,
                'transfer': False,
                'fetchTransfers': False,
            },
            'timeframes': {
                '1m': '1m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '4h': '4h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1d',
                '1w': '7d',
                '2w': '14d',
                '1M': '1M',
            },
            'urls': {
                'logo': 'https://cryptocom.intercom-attachments-7.com/i/o/204082378/08c69fc201ae0fa30ca1ef83/47b-bC4xUjyLOT2Oo1NBITGS2W9hRSgSQ3avOH__QTDrYVJDpXYJ87wAIvHAc6-aWJ61M5dq8j1ebA2xfIkgkLX3dkoZ8DP3qbS84ZFFkUHDq22iV4dxAT1dxhQhWEFbwgOcI2f6',
                'test': 'https://uat-api.3ona.co/v2',
                'api': 'https://api.crypto.com/v2',
                'www': 'https://crypto.com/',
                'referral': '',
                'doc': 'https://exchange-docs.crypto.com/',
                'fees': 'https://crypto.com/exchange/document/fees-limits',
            },
            'api': {
                'public': {
                    'get': [
                        'public/get-instruments',
                        'public/get-book',
                        'public/get-candlestick',
                        'public/get-ticker',
                        'public/get-trades',
                    ],
                },
                'private': {
                    'post': [
                        'private/create-withdrawal',
                        'private/get-withdrawal-history',
                        'private/get-deposit-history',
                        'private/get-deposit-address',
                        'private/get-account-summary',
                        'private/create-order',
                        'private/cancel-order',
                        'private/cancel-all-orders',
                        'private/get-order-history',
                        'private/get-open-orders',
                        'private/get-order-detail',
                        'private/get-trades',
                    ],
                },
            },
            'fees': {
                'trading': {
                    'maker': 0.004,
                    'taker': 0.004,
                },
            },
            'options': {},
            # https://exchange-docs.crypto.com/spot/index.html#response-and-reason-codes
            'exceptions': {
                'exact': {
                    '10001': ExchangeError,
                    '10002': PermissionDenied,
                    '10003': PermissionDenied,
                    '10004': BadRequest,
                    '10005': PermissionDenied,
                    '10006': DDoSProtection,
                    '10007': InvalidNonce,
                    '10008': BadRequest,
                    '10009': BadRequest,
                    '20001': BadRequest,
                    '20002': InsufficientFunds,
                    '30003': BadSymbol,
                    '30004': BadRequest,
                    '30005': BadRequest,
                    '30006': BadRequest,
                    '30007': BadRequest,
                    '30008': BadRequest,
                    '30009': BadRequest,
                    '30010': BadRequest,
                    '30013': BadRequest,
                    '30014': BadRequest,
                    '30016': BadRequest,
                    '30017': BadRequest,
                    '30023': BadRequest,
                    '30024': BadRequest,
                    '30025': BadRequest,
                    '40001': BadRequest,
                    '40002': BadRequest,
                    '40003': BadRequest,
                    '40004': BadRequest,
                    '40005': BadRequest,
                    '40006': BadRequest,
                    '40007': BadRequest,
                    '50001': BadRequest,
                },
            },
        })

    def nonce(self):
        return self.milliseconds()

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'] + '/' + path
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if query:
                url += '?' + self.urlencode(query)
        else:
            self.check_required_credentials()
            id = '1'
            nonce = str(self.nonce())
            requestParams = self.extend({}, params)
            paramsKeys = list(self.keysort(requestParams).keys())
            strSortKey = ''
            for i in range(0, len(paramsKeys)):
                strSortKey = strSortKey + str(paramsKeys[i]) + str(requestParams[paramsKeys[i]])
            payload = path + id + self.apiKey + strSortKey + nonce
            signature = self.hmac(self.encode(payload), self.encode(self.secret))
            body = self.json({
                'id': id,
                'method': path,
                'params': params,
                'api_key': self.apiKey,
                'sig': signature,
                'nonce': nonce,
            })
            headers = {
                'Content-Type': 'application/json',
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def fetch_markets(self, params={}):
        # {
        #     "id": 11,
        #     "method": "public/get-instruments",
        #     "code": 0,
        #     "result": {
        #       "instruments": [
        #         {
        #           "instrument_name": "BTC_USDT",
        #           "quote_currency": "BTC",
        #           "base_currency": "USDT",
        #           "price_decimals": 2,
        #           "quantity_decimals": 6,
        #           "margin_trading_enabled": True
        #         },
        #         {
        #           "instrument_name": "CRO_BTC",
        #           "quote_currency": "BTC",
        #           "base_currency": "CRO",
        #           "price_decimals": 8,
        #           "quantity_decimals": 2,
        #           "margin_trading_enabled": False
        #         }
        #       ]
        #     }
        #  }
        response = self.publicGetPublicGetInstruments(params)
        resultResponse = self.safe_value(response, 'result', {})
        markets = self.safe_value(resultResponse, 'instruments', [])
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            id = self.safe_string(market, 'instrument_name')
            baseId = self.safe_string(market, 'base_currency')
            quoteId = self.safe_string(market, 'quote_currency')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote
            precision = {
                'amount': self.safe_integer(market, 'quantity_decimals'),
                'price': self.safe_integer(market, 'price_decimals'),
            }
            result.append({
                'info': market,
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': True,
                'taker': self.fees['trading']['taker'],
                'maker': self.fees['trading']['maker'],
                'precision': precision,
                'limits': {
                    'amount': {
                        'min': math.pow(10, -precision['amount']),
                        'max': math.pow(10, precision['amount']),
                    },
                    'price': {
                        'min': math.pow(10, -precision['price']),
                        'max': math.pow(10, precision['price']),
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
            })
        return result

    def fetch_tickers(self, symbols=None, params={}):
        self.load_markets()
        response = self.publicGetPublicGetTicker(params)
        # {
        #     "code":0,
        #     "method":"public/get-ticker",
        #     "result":{
        #       "data": [
        #         {"i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00},
        #         {"i":"EOS_USDT","b":2.7676,"k":2.7776,"a":2.7693,"t":1591770798500,"v":774.51,"h":0.05,"l":0.05,"c":0.00},
        #         {"i":"BCH_USDT","b":247.49,"k":251.73,"a":251.67,"t":1591770797601,"v":1.01693,"h":0.01292,"l":0.01231,"c":-0.00047},
        #         {"i":"ETH_USDT","b":239.92,"k":242.59,"a":240.30,"t":1591770798701,"v":0.97575,"h":0.01236,"l":0.01199,"c":-0.00018},
        #         {"i":"ETH_CRO","b":2693.11,"k":2699.84,"a":2699.55,"t":1591770795053,"v":95.680,"h":8.218,"l":7.853,"c":-0.050}
        #       ]
        #     }
        # }
        resultResponse = self.safe_value(response, 'result', {})
        tickers = self.safe_value(resultResponse, 'data', [])
        result = {}
        for i in range(0, len(tickers)):
            ticker = tickers[i]
            marketId = self.safe_string(ticker, 'i')
            if marketId is not None:
                if marketId in self.markets_by_id:
                    market = self.markets_by_id[marketId]
                    symbol = market['symbol']
                    result[symbol] = self.parse_ticker(ticker, market)
                else:
                    result[marketId] = self.parse_ticker(ticker)
        return result

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = self.publicGetPublicGetTicker(self.extend(request, params))
        # {
        #     "code":0,
        #     "method":"public/get-ticker",
        #     "result":{
        #       "data": {"i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00}
        #     }
        # }
        resultResponse = self.safe_value(response, 'result', {})
        data = self.safe_value(resultResponse, 'data', {})
        return self.parse_ticker(data, market)

    def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchClosedOrders requires a `symbol` argument')
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = self.privatePostPrivateGetOrderHistory(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-order-history",
        #     "code": 0,
        #     "result": {
        #       "order_list": [
        #         {
        #           "status": "FILLED",
        #           "side": "SELL",
        #           "price": 1,
        #           "quantity": 1,
        #           "order_id": "367107623521528457",
        #           "client_oid": "my_order_0002",
        #           "create_time": 1588777459755,
        #           "update_time": 1588777460700,
        #           "type": "LIMIT",
        #           "instrument_name": "ETH_CRO",
        #           "cumulative_quantity": 1,
        #           "cumulative_value": 1,
        #           "avg_price": 1,
        #           "fee_currency": "CRO",
        #           "time_in_force": "GOOD_TILL_CANCEL"
        #         },
        #         {
        #           "status": "FILLED",
        #           "side": "SELL",
        #           "price": 1,
        #           "quantity": 1,
        #           "order_id": "367063282527104905",
        #           "client_oid": "my_order_0002",
        #           "create_time": 1588776138290,
        #           "update_time": 1588776138679,
        #           "type": "LIMIT",
        #           "instrument_name": "ETH_CRO",
        #           "cumulative_quantity": 1,
        #           "cumulative_value": 1,
        #           "avg_price": 1,
        #           "fee_currency": "CRO",
        #           "time_in_force": "GOOD_TILL_CANCEL"
        #         }
        #       ]
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        orderList = self.safe_value(data, 'order_list', [])
        orders = self.parse_orders(orderList, market, since, limit)
        orders = self.filter_by(orders, 'symbol', symbol)
        return orders

    def fetch_trades(self, symbol, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchTrades requires a `symbol` argument')
        self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = self.publicGetPublicGetTrades(self.extend(request, params))
        # {
        #     "code":0,
        #     "method":"public/get-trades",
        #     "result": {
        #          "instrument_name": "BTC_USDT",
        #          "data:": [
        #              {"dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"},
        #              {"dataTime":1591707701899,"d":465430234542863152,"s":"BUY","p":0.007749,"q":115.0,"t":1591707701898,"i":"VET_USDT"},
        #              {"dataTime":1591710786155,"d":465533724976458209,"s":"SELL","p":25.676,"q":0.55,"t":1591710786154,"i":"XTZ_CRO"},
        #              {"dataTime":1591710783300,"d":465533629172286576,"s":"SELL","p":2.9016,"q":0.6,"t":1591710783298,"i":"XTZ_USDT"},
        #              {"dataTime":1591710784499,"d":465533669425626384,"s":"SELL","p":2.7662,"q":0.58,"t":1591710784498,"i":"EOS_USDT"},
        #              {"dataTime":1591710784700,"d":465533676120104336,"s":"SELL","p":243.21,"q":0.01647,"t":1591710784698,"i":"ETH_USDT"},
        #              {"dataTime":1591710786600,"d":465533739878620208,"s":"SELL","p":253.06,"q":0.00516,"t":1591710786598,"i":"BCH_USDT"},
        #              {"dataTime":1591710786900,"d":465533749959572464,"s":"BUY","p":0.9999,"q":0.2,"t":1591710786898,"i":"USDC_USDT"},
        #              {"dataTime":1591710787500,"d":465533770081010000,"s":"BUY","p":3.159,"q":1.65,"t":1591710787498,"i":"ATOM_USDT"},
        #            ]
        #      }
        # }
        resultResponse = self.safe_value(response, 'result', {})
        data = self.safe_value(resultResponse, 'data', [])
        return self.parse_trades(data, market, since, limit)

    def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
            'timeframe': self.timeframes[timeframe],
        }
        response = self.publicGetPublicGetCandlestick(self.extend(request, params))
        # {
        #     "code":0,
        #     "method":"public/get-candlestick",
        #     "result":{
        #       "instrument_name":"BTC_USDT",
        #       "interval":"5m",
        #       "data":[
        #         {"t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583},
        #         {"t":1596945000000,"o":11753.63,"h":11754.77,"l":11739.83,"c":11746.17,"v":2.073019},
        #         {"t":1596945300000,"o":11746.16,"h":11753.24,"l":11738.1,"c":11740.65,"v":0.867247},
        #         ...
        #       ]
        #     }
        # }
        resultResponse = self.safe_value(response, 'result', {})
        data = self.safe_value(resultResponse, 'data', [])
        return self.parse_ohlcvs(data, market, timeframe, since, limit)

    def fetch_order_book(self, symbol, limit=None, params={}):
        self.load_markets()
        request = {
            'instrument_name': self.market_id(symbol),
        }
        if limit:
            request['depth'] = limit
        response = self.publicGetPublicGetBook(self.extend(request, params))
        # {
        #     "code":0,
        #     "method":"public/get-book",
        #     "result":{
        #       "bids":[[9668.44,0.006325,1.0],[9659.75,0.006776,1.0],[9653.14,0.011795,1.0],[9647.13,0.019434,1.0],[9634.62,0.013765,1.0],[9633.81,0.021395,1.0],[9628.46,0.037834,1.0],[9627.6,0.020909,1.0],[9621.51,0.026235,1.0],[9620.83,0.026701,1.0]],
        #       "asks":[[9697.0,0.68251,1.0],[9697.6,1.722864,2.0],[9699.2,1.664177,2.0],[9700.8,1.824953,2.0],[9702.4,0.85778,1.0],[9704.0,0.935792,1.0],[9713.32,0.002926,1.0],[9716.42,0.78923,1.0],[9732.19,0.00645,1.0],[9737.88,0.020216,1.0]],
        #       "t":1591704180270
        #     }
        # }
        orderBook = self.safe_value(response, 'result')
        return self.parse_order_book(orderBook, symbol)

    def fetch_balance(self, params={}):
        self.load_markets()
        response = self.privatePostPrivateGetAccountSummary(params)
        # {
        #     "id": 11,
        #     "method": "private/get-account-summary",
        #     "code": 0,
        #     "result": {
        #         "accounts": [
        #             {
        #                 "balance": 99999999.905000000000000000,
        #                 "available": 99999996.905000000000000000,
        #                 "order": 3.000000000000000000,
        #                 "stake": 0,
        #                 "currency": "CRO"
        #             }
        #         ]
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        coinList = self.safe_value(data, 'accounts', [])
        result = {'info': response}
        for i in range(0, len(coinList)):
            balance = coinList[i]
            currencyId = self.safe_string(balance, 'currency')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['total'] = self.safe_number(balance, 'balance')
            account['free'] = self.safe_number(balance, 'available')
            account['used'] = self.safe_number(balance, 'order')
            result[code] = account
        return self.parse_balance(result)

    def fetch_order(self, id, symbol=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'order_id': id,
        }
        response = self.privatePostPrivateGetOrderDetail(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-order-detail",
        #     "code": 0,
        #     "result": {
        #       "trade_list": [
        #         {
        #           "side": "BUY",
        #           "instrument_name": "ETH_CRO",
        #           "fee": 0.007,
        #           "trade_id": "371303044218155296",
        #           "create_time": 1588902493045,
        #           "traded_price": 7,
        #           "traded_quantity": 7,
        #           "fee_currency": "CRO",
        #           "order_id": "371302913889488619"
        #         }
        #       ],
        #       "order_info": {
        #         "status": "FILLED",
        #         "side": "BUY",
        #         "order_id": "371302913889488619",
        #         "client_oid": "9_yMYJDNEeqHxLqtD_2j3g",
        #         "create_time": 1588902489144,
        #         "update_time": 1588902493024,
        #         "type": "LIMIT",
        #         "instrument_name": "ETH_CRO",
        #         "cumulative_quantity": 7,
        #         "cumulative_value": 7,
        #         "avg_price": 7,
        #         "fee_currency": "CRO",
        #         "time_in_force": "GOOD_TILL_CANCEL",
        #         "exec_inst": "POST_ONLY"
        #       }
        #     }
        # }
        result = self.safe_value(response, 'result', {})
        order = self.safe_value(result, 'order_info', {})
        return self.parse_order(order, market)

    def create_order(self, symbol, type, side, amount, price=None, params={}):
        self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
            'side': side.upper(),
            'type': type.upper(),
            'quantity': amount,
        }
        if request['type'] == 'LIMIT' or request['type'] == 'STOP_LIMIT':
            request['price'] = self.price_to_precision(symbol, price)
        response = self.privatePostPrivateCreateOrder(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/create-order",
        #     "result": {
        #       "order_id": "337843775021233500",
        #       "client_oid": "my_order_0002"
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        value = self.safe_value(data, 'order_id')
        order = self.fetch_order(value, symbol)
        return order

    def cancel_all_orders(self, symbol=None, params={}):
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelAllOrders requires a `symbol` argument')
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = self.privatePostPrivateCancelAllOrders(self.extend(request, params))
        return response

    def cancel_order(self, id, symbol=None, params={}):
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelAllOrders requires a `symbol` argument')
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
            'order_id': id,
        }
        self.privatePostPrivateCancelOrder(self.extend(request, params))
        order = self.fetch_order(id, symbol)
        return order

    def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders requires a `symbol` argument')
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = self.privatePostPrivateGetOpenOrders(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-open-orders",
        #     "code": 0,
        #     "result": {
        #       "count": 1177,
        #       "order_list": [
        #         {
        #           "status": "ACTIVE",
        #           "side": "BUY",
        #           "price": 1,
        #           "quantity": 1,
        #           "order_id": "366543374673423753",
        #           "client_oid": "my_order_0002",
        #           "create_time": 1588760643829,
        #           "update_time": 1588760644292,
        #           "type": "LIMIT",
        #           "instrument_name": "ETH_CRO",
        #           "cumulative_quantity": 0,
        #           "cumulative_value": 0,
        #           "avg_price": 0,
        #           "fee_currency": "CRO",
        #           "time_in_force": "GOOD_TILL_CANCEL"
        #         },
        #         {
        #           "status": "ACTIVE",
        #           "side": "BUY",
        #           "price": 1,
        #           "quantity": 1,
        #           "order_id": "366455245775097673",
        #           "client_oid": "my_order_0002",
        #           "create_time": 1588758017375,
        #           "update_time": 1588758017411,
        #           "type": "LIMIT",
        #           "instrument_name": "ETH_CRO",
        #           "cumulative_quantity": 0,
        #           "cumulative_value": 0,
        #           "avg_price": 0,
        #           "fee_currency": "CRO",
        #           "time_in_force": "GOOD_TILL_CANCEL"
        #         }
        #       ]
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        resultList = self.safe_value(data, 'order_list', [])
        orders = self.parse_orders(resultList, market, since, limit)
        orders = self.filter_by(orders, 'symbol', symbol)
        return orders

    def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        orders = self.fetch_orders(symbol, since, limit, params)
        orders = self.filter_by_array(orders, 'status', ['closed', 'canceled'], False)
        return orders

    def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        self.load_markets()
        request = {}
        market = None
        if symbol is not None:
            market = self.market(symbol)
            request['instrument_name'] = market['id']
        response = self.privatePostPrivateGetTrades(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-trades",
        #     "code": 0,
        #     "result": {
        #       "trade_list": [
        #         {
        #           "side": "SELL",
        #           "instrument_name": "ETH_CRO",
        #           "fee": 0.014,
        #           "trade_id": "367107655537806900",
        #           "create_time": 1588777459755,
        #           "traded_price": 7,
        #           "traded_quantity": 1,
        #           "fee_currency": "CRO",
        #           "order_id": "367107623521528450"
        #         }
        #       ]
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        resultList = self.safe_value(data, 'trade_list', [])
        return self.parse_trades(resultList, market, since, limit)

    def fetch_deposit_address(self, code, params={}):
        self.load_markets()
        currency = self.currency(code)
        request = {
            'currency': currency['id'],
        }
        response = self.privatePostPrivateGetDepositAddress(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-deposit-address",
        #     "code": 0,
        #     "result": {
        #          "deposit_address_list": [
        #              {
        #                  "currency": "CRO",
        #                  "create_time": 1615886328000,
        #                  "id": "12345",
        #                  "address": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        #                  "status": "1",
        #                  "network": "CRO"
        #              },
        #              {
        #                  "currency": "CRO",
        #                  "create_time": 1615886332000,
        #                  "id": "12346",
        #                  "address": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
        #                  "status": "1",
        #                  "network": "ETH"
        #              }
        #          ]
        #    }
        # }
        data = self.safe_value(response, 'result', {})
        address = self.safe_value(data, 'deposit_address_list', [])
        addressList = []
        for i in range(0, len(address)):
            addressList.append(address[i].address)
        self.check_address(addressList[0])
        return {
            'currency': code,
            'address': addressList[0],
            'info': data,
        }

    def fetch_deposits(self, code=None, since=None, limit=None, params={}):
        self.load_markets()
        currency = None
        request = {}
        if code is not None:
            currency = self.currency(code)
            request['currency'] = currency['id']
        if since is not None:
            request['start_ts'] = since
            # max 3 months range https://exchange-docs.crypto.com/spot/index.html#private-get-withdrawal-history
            request['end_ts'] = self.sum(since, 7776000000)
        if limit is not None:
            request['end_ts'] = limit
        response = self.privatePostPrivateGetDepositHistory(self.extend(request, params))
        # {
        #     "id": 11,
        #     "method": "private/get-deposit-history",
        #     "code": 0,
        #     "result": {
        #       "deposit_list": [
        #         {
        #           "currency": "XRP",
        #           "fee": 1.0,
        #           "create_time": 1607063412000,
        #           "id": "2220",
        #           "update_time": 1607063460000,
        #           "amount": 100,
        #           "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        #           "status": "1"
        #         }
        #       ]
        #     }
        # }
        data = self.safe_value(response, 'result', {})
        depositList = self.safe_value(data, 'deposit_list', [])
        return self.parse_transactions(depositList, currency, since, limit)

    def handle_errors(self, code, reason, url, method, headers, body, response, requestHeaders, requestBody):
        errorCode = self.safe_string(response, 'code')
        message = self.safe_string(response, 'message')
        if errorCode in self.exceptions['exact']:
            Exception = self.exceptions['exact'][errorCode]
            raise Exception(self.id + ' ' + message)
        if errorCode != '0':
            raise ExchangeError(self.id + ' ' + message)

    def parse_ticker(self, ticker, market=None):
        # {
        #     "i":"CRO_BTC",
        #     "b":0.00000890,
        #     "k":0.00001179,
        #     "a":0.00001042,
        #     "t":1591770793901,
        #     "v":14905879.59,
        #     "h":0.00,
        #     "l":0.00,
        #     "c":0.00
        # }
        timestamp = self.safe_integer(ticker, 't')
        if timestamp is None:
            timestamp = self.milliseconds()
        symbol = None
        if market is not None:
            symbol = market['symbol']
        open = None
        change = None
        average = None
        last = self.safe_number(ticker, 'a')
        relativeChange = self.safe_number(ticker, 'c')
        if relativeChange != -1:
            open = last / self.sum(1, relativeChange)
            change = last - open
            average = self.sum(last, open) / 2
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_number(ticker, 'h'),
            'low': self.safe_number(ticker, 'l'),
            'bid': self.safe_number(ticker, 'b'),
            'bidVolume': None,
            'ask': self.safe_number(ticker, 'k'),
            'askVolume': None,
            'vwap': None,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': change,
            'percentage': relativeChange * 100,
            'average': average,
            'baseVolume': self.safe_number(ticker, 'v'),
            'quoteVolume': None,
            'info': ticker,
        }

    def parse_trade(self, trade, market=None):
        #
        # public/get-trades
        #
        # {"dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"},
        #
        # private/get-trades
        #
        # {
        #     "side": "SELL",
        #     "instrument_name": "ETH_CRO",
        #     "fee": 0.014,
        #     "trade_id": "367107655537806900",
        #     "create_time": 1588777459755,
        #     "traded_price": 7,
        #     "traded_quantity": 1,
        #     "fee_currency": "CRO",
        #     "order_id": "367107623521528450"
        # }
        timestamp = self.safe_integer(trade, 't')
        if timestamp is None:
            timestamp = self.safe_integer(trade, 'create_time')
        marketId = self.safe_string_2(trade, 'i', 'instrument_name')
        symbol = None
        if market is not None:
            symbol = market['symbol']
        elif marketId is not None:
            symbol = self.safe_symbol(marketId, market, '_')
        price = self.safe_number(trade, 'p')
        if price is None:
            price = self.safe_number(trade, 'traded_price')
        amount = self.safe_number(trade, 'q')
        if amount is None:
            amount = self.safe_number(trade, 'traded_quantity')
        cost = price * amount
        side = self.safe_string_2(trade, 's', 'side').lower()
        id = self.safe_string_2(trade, 'd', 'trade_id')
        type = 'limit'  # all trades are still limit trades
        takerOrMaker = self.safe_string(trade, 'liquidity_indicator')
        order = self.safe_string(trade, 'order_id')
        fee = None
        feeCost = self.safe_number(trade, 'fee')
        if feeCost is not None:
            feeCurrency = self.safe_string(trade, 'fee_currency')
            if market is not None:
                if side == 'buy':
                    feeCurrency = market['base']
                elif side == 'sell':
                    feeCurrency = market['quote']
            fee = {
                'currency': feeCurrency,
                'cost': feeCost,
            }
        return {
            'info': trade,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'order': order,
            'takerOrMaker': takerOrMaker,
            'type': type,
            'fee': fee,
        }

    def parse_ohlcv(self, ohlcv, market=None):
        #      {"t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583}
        return [
            self.safe_integer(ohlcv, 't'),
            self.safe_number(ohlcv, 'o'),
            self.safe_number(ohlcv, 'h'),
            self.safe_number(ohlcv, 'l'),
            self.safe_number(ohlcv, 'c'),
            self.safe_number(ohlcv, 'v'),
        ]

    def parse_order_status(self, status):
        statuses = {
            'ACTIVE': 'open',
            'CANCELED': 'canceled',
            'FILLED': 'closed',
            'REJECTED': 'rejected',
            'EXPIRED': 'expired',
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        #       {
        #         "status": "FILLED",
        #         "side": "BUY",
        #         "order_id": "371302913889488619",
        #         "client_oid": "9_yMYJDNEeqHxLqtD_2j3g",
        #         "create_time": 1588902489144,
        #         "update_time": 1588902493024,
        #         "type": "LIMIT",
        #         "instrument_name": "ETH_CRO",
        #         "cumulative_quantity": 7,
        #         "cumulative_value": 7,
        #         "avg_price": 7,
        #         "fee_currency": "CRO",
        #         "time_in_force": "GOOD_TILL_CANCEL",
        #         "exec_inst": "POST_ONLY"
        #       }
        created = self.safe_integer(order, 'create_time')
        updated = self.safe_integer(order, 'update_time')
        marketId = self.safe_string(order, 'instrument_name')
        symbol = self.safe_symbol(marketId, market)
        amount = self.safe_number(order, 'quantity')
        filled = self.safe_number(order, 'cumulative_quantity')
        remaining = amount - filled
        status = self.parse_order_status(self.safe_string(order, 'status'))
        id = self.safe_string(order, 'order_id')
        clientOrderId = self.safe_string(order, 'client_oid')
        price = self.safe_number(order, 'price')
        average = self.safe_number(order, 'avg_price')
        type = self.safe_string_lower(order, 'type')
        side = self.safe_string_lower(order, 'side')
        timeInForce = self.safe_string(order, 'time_in_force')
        postOnly = self.safe_string(order, 'exec_inst') == 'POST_ONLY'
        cost = 0
        if status == 'closed':
            cost = amount * price
        return {
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': created,
            'datetime': self.iso8601(created),
            'lastTradeTimestamp': updated,
            'status': status,
            'symbol': symbol,
            'type': type,
            'timeInForce': timeInForce,
            'postOnly': postOnly,
            'side': side,
            'price': price,
            'amount': amount,
            'filled': filled,
            'remaining': remaining,
            'trades': [],
            'info': order,
            'cost': cost,
            'fee': None,
            'average': average,
        }

    def parse_transaction_status_by_type(self, status):
        statuses = {
            '0': 'pending',
            '1': 'ok',
            '2': 'failed',
            '3': 'pending',
        }
        return self.safe_string(statuses, status, status)

    def parse_transaction(self, transaction, currency=None):
        #
        # fetchDeposits
        #
        # {
        #     "currency": "XRP",
        #     "fee": 1.0,
        #     "create_time": 1607063412000,
        #     "id": "2220",
        #     "update_time": 1607063460000,
        #     "amount": 100,
        #     "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        #     "status": "1"
        # }
        #
        # fetchWithdrawals
        #
        # {
        #     "currency": "XRP",
        #     "client_wid": "my_withdrawal_002",
        #     "fee": 1.0,
        #     "create_time": 1607063412000,
        #     "id": "2220",
        #     "update_time": 1607063460000,
        #     "amount": 100,
        #     "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        #     "status": "1"
        # }
        #
        id = self.safe_string(transaction, 'id')
        address = self.safe_string(transaction, 'address')
        currencyId = self.safe_string(transaction, 'currency')
        code = self.safe_currency_code(currencyId, currency)
        timestamp = self.safe_integer(transaction, 'create_time')
        status = self.parse_transaction_status_by_type(self.safe_string(transaction, 'status'))
        amount = self.safe_number(transaction, 'amount')
        txId = self.safe_string(transaction, 'txid')
        feeCost = self.safe_number(transaction, 'fee')
        fee = None
        if feeCost is not None:
            fee = {'currency': code, 'cost': feeCost}
        updated = self.safe_integer(transaction, 'update_time')
        return {
            'info': transaction,
            'id': id,
            'txid': txId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'address': address,
            'addressTo': address,
            'addressFrom': None,
            'tag': None,
            'tagTo': None,
            'tagFrom': None,
            'type': None,
            'amount': amount,
            'currency': code,
            'status': status,
            'updated': updated,
            'internal': None,
            'fee': fee,
        }
