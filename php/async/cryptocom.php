<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;

class cryptocom extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'cryptocom',
            'name' => 'Crypto.com',
            'countries' => array( 'MT' ),
            'version' => 'v2',
            'rateLimit' => 100,
            'has' => array(
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'CORS' => false,
                'createOrder' => true,
                'fetchCurrencies' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => 'emulated',
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchFundingFees' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRates' => false,
                'fetchIsolatedPositions' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrders' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => false,
                'fetchStatus' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactions' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'withdraw' => false,
                'transfer' => false,
                'fetchTransfers' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '1w' => '7d',
                '2w' => '14d',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => 'https://cryptocom.intercom-attachments-7.com/i/o/204082378/08c69fc201ae0fa30ca1ef83/47b-bC4xUjyLOT2Oo1NBITGS2W9hRSgSQ3avOH__QTDrYVJDpXYJ87wAIvHAc6-aWJ61M5dq8j1ebA2xfIkgkLX3dkoZ8DP3qbS84ZFFkUHDq22iV4dxAT1dxhQhWEFbwgOcI2f6',
                'test' => 'https://uat-api.3ona.co/v2',
                'api' => 'https://api.crypto.com/v2',
                'www' => 'https://crypto.com/',
                'referral' => '',
                'doc' => 'https://exchange-docs.crypto.com/',
                'fees' => 'https://crypto.com/exchange/document/fees-limits',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'public/get-instruments',
                        'public/get-book',
                        'public/get-candlestick',
                        'public/get-ticker',
                        'public/get-trades',
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'private/create-withdrawal',
                        'private/get-withdrawal-history',
                        'private/get-deposit-history',
                        'private/get-deposit-address',
                        'private/get-account-summary',
                        'private/create-order',
                        'private/cancel-order',
                        'private/cancel-all-orders',
                        'private/get-order-history',
                        'private/get-open-orders',
                        'private/get-order-detail',
                        'private/get-trades',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => 0.004,
                    'taker' => 0.004,
                ),
            ),
            'options' => array(),
            // https://exchange-docs.crypto.com/spot/index.html#response-and-reason-codes
            'exceptions' => array(
                'exact' => array(
                    '10001' => '\\ccxt\\ExchangeError',
                    '10002' => '\\ccxt\\PermissionDenied',
                    '10003' => '\\ccxt\\PermissionDenied',
                    '10004' => '\\ccxt\\BadRequest',
                    '10005' => '\\ccxt\\PermissionDenied',
                    '10006' => '\\ccxt\\DDoSProtection',
                    '10007' => '\\ccxt\\InvalidNonce',
                    '10008' => '\\ccxt\\BadRequest',
                    '10009' => '\\ccxt\\BadRequest',
                    '20001' => '\\ccxt\\BadRequest',
                    '20002' => '\\ccxt\\InsufficientFunds',
                    '30003' => '\\ccxt\\BadSymbol',
                    '30004' => '\\ccxt\\BadRequest',
                    '30005' => '\\ccxt\\BadRequest',
                    '30006' => '\\ccxt\\BadRequest',
                    '30007' => '\\ccxt\\BadRequest',
                    '30008' => '\\ccxt\\BadRequest',
                    '30009' => '\\ccxt\\BadRequest',
                    '30010' => '\\ccxt\\BadRequest',
                    '30013' => '\\ccxt\\BadRequest',
                    '30014' => '\\ccxt\\BadRequest',
                    '30016' => '\\ccxt\\BadRequest',
                    '30017' => '\\ccxt\\BadRequest',
                    '30023' => '\\ccxt\\BadRequest',
                    '30024' => '\\ccxt\\BadRequest',
                    '30025' => '\\ccxt\\BadRequest',
                    '40001' => '\\ccxt\\BadRequest',
                    '40002' => '\\ccxt\\BadRequest',
                    '40003' => '\\ccxt\\BadRequest',
                    '40004' => '\\ccxt\\BadRequest',
                    '40005' => '\\ccxt\\BadRequest',
                    '40006' => '\\ccxt\\BadRequest',
                    '40007' => '\\ccxt\\BadRequest',
                    '50001' => '\\ccxt\\BadRequest',
                ),
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/' . $path;
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $id = '1';
            $nonce = (string) $this->nonce();
            $requestParams = array_merge(array(), $params);
            $paramsKeys = is_array($this->keysort($requestParams)) ? array_keys($this->keysort($requestParams)) : array();
            $strSortKey = '';
            for ($i = 0; $i < count($paramsKeys); $i++) {
                $strSortKey = $strSortKey . (string) $paramsKeys[$i] . (string) $requestParams[$paramsKeys[$i]];
            }
            $payload = $path . $id . $this->apiKey . $strSortKey . $nonce;
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret));
            $body = $this->json(array(
                'id' => $id,
                'method' => $path,
                'params' => $params,
                'api_key' => $this->apiKey,
                'sig' => $signature,
                'nonce' => $nonce,
            ));
            $headers = array(
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function fetch_markets($params = array ()) {
        // {
        //     "id" => 11,
        //     "method" => "public/get-instruments",
        //     "code" => 0,
        //     "result" => {
        //       "instruments" => array(
        //         array(
        //           "instrument_name" => "BTC_USDT",
        //           "quote_currency" => "BTC",
        //           "base_currency" => "USDT",
        //           "price_decimals" => 2,
        //           "quantity_decimals" => 6,
        //           "margin_trading_enabled" => true
        //         ),
        //         {
        //           "instrument_name" => "CRO_BTC",
        //           "quote_currency" => "BTC",
        //           "base_currency" => "CRO",
        //           "price_decimals" => 8,
        //           "quantity_decimals" => 2,
        //           "margin_trading_enabled" => false
        //         }
        //       )
        //     }
        //  }
        $response = yield $this->publicGetPublicGetInstruments ($params);
        $resultResponse = $this->safe_value($response, 'result', array());
        $markets = $this->safe_value($resultResponse, 'instruments', array());
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'instrument_name');
            $baseId = $this->safe_string($market, 'base_currency');
            $quoteId = $this->safe_string($market, 'quote_currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array(
                'amount' => $this->safe_integer($market, 'quantity_decimals'),
                'price' => $this->safe_integer($market, 'price_decimals'),
            );
            $result[] = array(
                'info' => $market,
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'taker' => $this->fees['trading']['taker'],
                'maker' => $this->fees['trading']['maker'],
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => pow(10, -$precision['amount']),
                        'max' => pow(10, $precision['amount']),
                    ),
                    'price' => array(
                        'min' => pow(10, -$precision['price']),
                        'max' => pow(10, $precision['price']),
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->publicGetPublicGetTicker ($params);
        // {
        //     "code":0,
        //     "method":"public/get-$ticker",
        //     "result":{
        //       "data" => array(
        //         array("i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00),
        //         array("i":"EOS_USDT","b":2.7676,"k":2.7776,"a":2.7693,"t":1591770798500,"v":774.51,"h":0.05,"l":0.05,"c":0.00),
        //         array("i":"BCH_USDT","b":247.49,"k":251.73,"a":251.67,"t":1591770797601,"v":1.01693,"h":0.01292,"l":0.01231,"c":-0.00047),
        //         array("i":"ETH_USDT","b":239.92,"k":242.59,"a":240.30,"t":1591770798701,"v":0.97575,"h":0.01236,"l":0.01199,"c":-0.00018),
        //         array("i":"ETH_CRO","b":2693.11,"k":2699.84,"a":2699.55,"t":1591770795053,"v":95.680,"h":8.218,"l":7.853,"c":-0.050)
        //       )
        //     }
        // }
        $resultResponse = $this->safe_value($response, 'result', array());
        $tickers = $this->safe_value($resultResponse, 'data', array());
        $result = array();
        for ($i = 0; $i < count($tickers); $i++) {
            $ticker = $tickers[$i];
            $marketId = $this->safe_string($ticker, 'i');
            if ($marketId !== null) {
                if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
                    $market = $this->markets_by_id[$marketId];
                    $symbol = $market['symbol'];
                    $result[$symbol] = $this->parse_ticker($ticker, $market);
                } else {
                    $result[$marketId] = $this->parse_ticker($ticker);
                }
            }
        }
        return $result;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = yield $this->publicGetPublicGetTicker (array_merge($request, $params));
        // {
        //     "code":0,
        //     "method":"public/get-ticker",
        //     "result":{
        //       "data" => array("i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00)
        //     }
        // }
        $resultResponse = $this->safe_value($response, 'result', array());
        $data = $this->safe_value($resultResponse, 'data', array());
        return $this->parse_ticker($data, $market);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchClosedOrders requires a `$symbol` argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = yield $this->privatePostPrivateGetOrderHistory (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-order-history",
        //     "code" => 0,
        //     "result" => {
        //       "order_list" => array(
        //         array(
        //           "status" => "FILLED",
        //           "side" => "SELL",
        //           "price" => 1,
        //           "quantity" => 1,
        //           "order_id" => "367107623521528457",
        //           "client_oid" => "my_order_0002",
        //           "create_time" => 1588777459755,
        //           "update_time" => 1588777460700,
        //           "type" => "LIMIT",
        //           "instrument_name" => "ETH_CRO",
        //           "cumulative_quantity" => 1,
        //           "cumulative_value" => 1,
        //           "avg_price" => 1,
        //           "fee_currency" => "CRO",
        //           "time_in_force" => "GOOD_TILL_CANCEL"
        //         ),
        //         {
        //           "status" => "FILLED",
        //           "side" => "SELL",
        //           "price" => 1,
        //           "quantity" => 1,
        //           "order_id" => "367063282527104905",
        //           "client_oid" => "my_order_0002",
        //           "create_time" => 1588776138290,
        //           "update_time" => 1588776138679,
        //           "type" => "LIMIT",
        //           "instrument_name" => "ETH_CRO",
        //           "cumulative_quantity" => 1,
        //           "cumulative_value" => 1,
        //           "avg_price" => 1,
        //           "fee_currency" => "CRO",
        //           "time_in_force" => "GOOD_TILL_CANCEL"
        //         }
        //       )
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $orderList = $this->safe_value($data, 'order_list', array());
        $orders = $this->parse_orders($orderList, $market, $since, $limit);
        $orders = $this->filter_by($orders, 'symbol', $symbol);
        return $orders;
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchTrades requires a `$symbol` argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = yield $this->publicGetPublicGetTrades (array_merge($request, $params));
        // {
        //     "code":0,
        //     "method":"public/get-trades",
        //     "result" => {
        //          "instrument_name" => "BTC_USDT",
        //          "data:" => array(
        //              array("dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"),
        //              array("dataTime":1591707701899,"d":465430234542863152,"s":"BUY","p":0.007749,"q":115.0,"t":1591707701898,"i":"VET_USDT"),
        //              array("dataTime":1591710786155,"d":465533724976458209,"s":"SELL","p":25.676,"q":0.55,"t":1591710786154,"i":"XTZ_CRO"),
        //              array("dataTime":1591710783300,"d":465533629172286576,"s":"SELL","p":2.9016,"q":0.6,"t":1591710783298,"i":"XTZ_USDT"),
        //              array("dataTime":1591710784499,"d":465533669425626384,"s":"SELL","p":2.7662,"q":0.58,"t":1591710784498,"i":"EOS_USDT"),
        //              array("dataTime":1591710784700,"d":465533676120104336,"s":"SELL","p":243.21,"q":0.01647,"t":1591710784698,"i":"ETH_USDT"),
        //              array("dataTime":1591710786600,"d":465533739878620208,"s":"SELL","p":253.06,"q":0.00516,"t":1591710786598,"i":"BCH_USDT"),
        //              array("dataTime":1591710786900,"d":465533749959572464,"s":"BUY","p":0.9999,"q":0.2,"t":1591710786898,"i":"USDC_USDT"),
        //              array("dataTime":1591710787500,"d":465533770081010000,"s":"BUY","p":3.159,"q":1.65,"t":1591710787498,"i":"ATOM_USDT"),
        //            )
        //      }
        // }
        $resultResponse = $this->safe_value($response, 'result', array());
        $data = $this->safe_value($resultResponse, 'data', array());
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
            'timeframe' => $this->timeframes[$timeframe],
        );
        $response = yield $this->publicGetPublicGetCandlestick (array_merge($request, $params));
        // {
        //     "code":0,
        //     "method":"public/get-candlestick",
        //     "result":{
        //       "instrument_name":"BTC_USDT",
        //       "interval":"5m",
        //       "data":array(
        //         array("t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583),
        //         array("t":1596945000000,"o":11753.63,"h":11754.77,"l":11739.83,"c":11746.17,"v":2.073019),
        //         array("t":1596945300000,"o":11746.16,"h":11753.24,"l":11738.1,"c":11740.65,"v":0.867247),
        //         ...
        //       )
        //     }
        // }
        $resultResponse = $this->safe_value($response, 'result', array());
        $data = $this->safe_value($resultResponse, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array(
            'instrument_name' => $this->market_id($symbol),
        );
        if ($limit) {
            $request['depth'] = $limit;
        }
        $response = yield $this->publicGetPublicGetBook (array_merge($request, $params));
        // {
        //     "code":0,
        //     "method":"public/get-book",
        //     "result":{
        //       "bids":[[9668.44,0.006325,1.0],[9659.75,0.006776,1.0],[9653.14,0.011795,1.0],[9647.13,0.019434,1.0],[9634.62,0.013765,1.0],[9633.81,0.021395,1.0],[9628.46,0.037834,1.0],[9627.6,0.020909,1.0],[9621.51,0.026235,1.0],[9620.83,0.026701,1.0]],
        //       "asks":[[9697.0,0.68251,1.0],[9697.6,1.722864,2.0],[9699.2,1.664177,2.0],[9700.8,1.824953,2.0],[9702.4,0.85778,1.0],[9704.0,0.935792,1.0],[9713.32,0.002926,1.0],[9716.42,0.78923,1.0],[9732.19,0.00645,1.0],[9737.88,0.020216,1.0]],
        //       "t":1591704180270
        //     }
        // }
        $orderBook = $this->safe_value($response, 'result');
        return $this->parse_order_book($orderBook, $symbol);
    }

    public function fetch_balance($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privatePostPrivateGetAccountSummary ($params);
        // {
        //     "id" => 11,
        //     "method" => "private/get-$account-summary",
        //     "code" => 0,
        //     "result" => {
        //         "accounts" => array(
        //             {
        //                 "balance" => 99999999.905000000000000000,
        //                 "available" => 99999996.905000000000000000,
        //                 "order" => 3.000000000000000000,
        //                 "stake" => 0,
        //                 "currency" => "CRO"
        //             }
        //         )
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $coinList = $this->safe_value($data, 'accounts', array());
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($coinList); $i++) {
            $balance = $coinList[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['total'] = $this->safe_number($balance, 'balance');
            $account['free'] = $this->safe_number($balance, 'available');
            $account['used'] = $this->safe_number($balance, 'order');
            $result[$code] = $account;
        }
        return $this->parse_balance($result);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'order_id' => $id,
        );
        $response = yield $this->privatePostPrivateGetOrderDetail (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-$order-detail",
        //     "code" => 0,
        //     "result" => {
        //       "trade_list" => array(
        //         {
        //           "side" => "BUY",
        //           "instrument_name" => "ETH_CRO",
        //           "fee" => 0.007,
        //           "trade_id" => "371303044218155296",
        //           "create_time" => 1588902493045,
        //           "traded_price" => 7,
        //           "traded_quantity" => 7,
        //           "fee_currency" => "CRO",
        //           "order_id" => "371302913889488619"
        //         }
        //       ),
        //       "order_info" => {
        //         "status" => "FILLED",
        //         "side" => "BUY",
        //         "order_id" => "371302913889488619",
        //         "client_oid" => "9_yMYJDNEeqHxLqtD_2j3g",
        //         "create_time" => 1588902489144,
        //         "update_time" => 1588902493024,
        //         "type" => "LIMIT",
        //         "instrument_name" => "ETH_CRO",
        //         "cumulative_quantity" => 7,
        //         "cumulative_value" => 7,
        //         "avg_price" => 7,
        //         "fee_currency" => "CRO",
        //         "time_in_force" => "GOOD_TILL_CANCEL",
        //         "exec_inst" => "POST_ONLY"
        //       }
        //     }
        // }
        $result = $this->safe_value($response, 'result', array());
        $order = $this->safe_value($result, 'order_info', array());
        return $this->parse_order($order, $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
            'side' => strtoupper($side),
            'type' => strtoupper($type),
            'quantity' => $amount,
        );
        if ($request['type'] === 'LIMIT' || $request['type'] === 'STOP_LIMIT') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = yield $this->privatePostPrivateCreateOrder (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/create-$order",
        //     "result" => {
        //       "order_id" => "337843775021233500",
        //       "client_oid" => "my_order_0002"
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $value = $this->safe_value($data, 'order_id');
        $order = yield $this->fetch_order($value, $symbol);
        return $order;
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders requires a `$symbol` argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = yield $this->privatePostPrivateCancelAllOrders (array_merge($request, $params));
        return $response;
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders requires a `$symbol` argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
            'order_id' => $id,
        );
        yield $this->privatePostPrivateCancelOrder (array_merge($request, $params));
        $order = yield $this->fetch_order($id, $symbol);
        return $order;
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders requires a `$symbol` argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = yield $this->privatePostPrivateGetOpenOrders (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-open-$orders",
        //     "code" => 0,
        //     "result" => {
        //       "count" => 1177,
        //       "order_list" => array(
        //         array(
        //           "status" => "ACTIVE",
        //           "side" => "BUY",
        //           "price" => 1,
        //           "quantity" => 1,
        //           "order_id" => "366543374673423753",
        //           "client_oid" => "my_order_0002",
        //           "create_time" => 1588760643829,
        //           "update_time" => 1588760644292,
        //           "type" => "LIMIT",
        //           "instrument_name" => "ETH_CRO",
        //           "cumulative_quantity" => 0,
        //           "cumulative_value" => 0,
        //           "avg_price" => 0,
        //           "fee_currency" => "CRO",
        //           "time_in_force" => "GOOD_TILL_CANCEL"
        //         ),
        //         {
        //           "status" => "ACTIVE",
        //           "side" => "BUY",
        //           "price" => 1,
        //           "quantity" => 1,
        //           "order_id" => "366455245775097673",
        //           "client_oid" => "my_order_0002",
        //           "create_time" => 1588758017375,
        //           "update_time" => 1588758017411,
        //           "type" => "LIMIT",
        //           "instrument_name" => "ETH_CRO",
        //           "cumulative_quantity" => 0,
        //           "cumulative_value" => 0,
        //           "avg_price" => 0,
        //           "fee_currency" => "CRO",
        //           "time_in_force" => "GOOD_TILL_CANCEL"
        //         }
        //       )
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $resultList = $this->safe_value($data, 'order_list', array());
        $orders = $this->parse_orders($resultList, $market, $since, $limit);
        $orders = $this->filter_by($orders, 'symbol', $symbol);
        return $orders;
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $orders = yield $this->fetch_orders($symbol, $since, $limit, $params);
        $orders = $this->filter_by_array($orders, 'status', array( 'closed', 'canceled' ), false);
        return $orders;
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instrument_name'] = $market['id'];
        }
        $response = yield $this->privatePostPrivateGetTrades (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-trades",
        //     "code" => 0,
        //     "result" => {
        //       "trade_list" => array(
        //         {
        //           "side" => "SELL",
        //           "instrument_name" => "ETH_CRO",
        //           "fee" => 0.014,
        //           "trade_id" => "367107655537806900",
        //           "create_time" => 1588777459755,
        //           "traded_price" => 7,
        //           "traded_quantity" => 1,
        //           "fee_currency" => "CRO",
        //           "order_id" => "367107623521528450"
        //         }
        //       )
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $resultList = $this->safe_value($data, 'trade_list', array());
        return $this->parse_trades($resultList, $market, $since, $limit);
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = yield $this->privatePostPrivateGetDepositAddress (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-deposit-$address",
        //     "code" => 0,
        //     "result" => {
        //          "deposit_address_list" => array(
        //              array(
        //                  "currency" => "CRO",
        //                  "create_time" => 1615886328000,
        //                  "id" => "12345",
        //                  "address" => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        //                  "status" => "1",
        //                  "network" => "CRO"
        //              ),
        //              {
        //                  "currency" => "CRO",
        //                  "create_time" => 1615886332000,
        //                  "id" => "12346",
        //                  "address" => "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
        //                  "status" => "1",
        //                  "network" => "ETH"
        //              }
        //          )
        //    }
        // }
        $data = $this->safe_value($response, 'result', array());
        $address = $this->safe_value($data, 'deposit_address_list', array());
        $addressList = array();
        for ($i = 0; $i < count($address); $i++) {
            $addressList[] = $address[$i].address;
        }
        $this->check_address($addressList[0]);
        return array(
            'currency' => $code,
            'address' => $addressList[0],
            'info' => $data,
        );
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $currency = null;
        $request = array();
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['start_ts'] = $since;
            // max 3 months range https://exchange-docs.crypto.com/spot/index.html#private-get-withdrawal-history
            $request['end_ts'] = $this->sum($since, 7776000000);
        }
        if ($limit !== null) {
            $request['end_ts'] = $limit;
        }
        $response = yield $this->privatePostPrivateGetDepositHistory (array_merge($request, $params));
        // {
        //     "id" => 11,
        //     "method" => "private/get-deposit-history",
        //     "code" => 0,
        //     "result" => {
        //       "deposit_list" => array(
        //         {
        //           "currency" => "XRP",
        //           "fee" => 1.0,
        //           "create_time" => 1607063412000,
        //           "id" => "2220",
        //           "update_time" => 1607063460000,
        //           "amount" => 100,
        //           "address" => "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //           "status" => "1"
        //         }
        //       )
        //     }
        // }
        $data = $this->safe_value($response, 'result', array());
        $depositList = $this->safe_value($data, 'deposit_list', array());
        return $this->parse_transactions($depositList, $currency, $since, $limit);
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        $errorCode = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'message');
        if (is_array($this->exceptions['exact']) && array_key_exists($errorCode, $this->exceptions['exact'])) {
            $Exception = $this->exceptions['exact'][$errorCode];
            throw new $Exception($this->id . ' ' . $message);
        }
        if ($errorCode !== '0') {
            throw new ExchangeError($this->id . ' ' . $message);
        }
    }

    public function parse_ticker($ticker, $market = null) {
        // {
        //     "i":"CRO_BTC",
        //     "b":0.00000890,
        //     "k":0.00001179,
        //     "a":0.00001042,
        //     "t":1591770793901,
        //     "v":14905879.59,
        //     "h":0.00,
        //     "l":0.00,
        //     "c":0.00
        // }
        $timestamp = $this->safe_integer($ticker, 't');
        if ($timestamp === null) {
            $timestamp = $this->milliseconds();
        }
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $open = null;
        $change = null;
        $average = null;
        $last = $this->safe_number($ticker, 'a');
        $relativeChange = $this->safe_number($ticker, 'c');
        if ($relativeChange !== -1) {
            $open = $last / $this->sum(1, $relativeChange);
            $change = $last - $open;
            $average = $this->sum($last, $open) / 2;
        }
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ticker, 'h'),
            'low' => $this->safe_number($ticker, 'l'),
            'bid' => $this->safe_number($ticker, 'b'),
            'bidVolume' => null,
            'ask' => $this->safe_number($ticker, 'k'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $relativeChange * 100,
            'average' => $average,
            'baseVolume' => $this->safe_number($ticker, 'v'),
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function parse_trade($trade, $market = null) {
        //
        // public/get-trades
        //
        // array("dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"),
        //
        // private/get-trades
        //
        // {
        //     "side" => "SELL",
        //     "instrument_name" => "ETH_CRO",
        //     "fee" => 0.014,
        //     "trade_id" => "367107655537806900",
        //     "create_time" => 1588777459755,
        //     "traded_price" => 7,
        //     "traded_quantity" => 1,
        //     "fee_currency" => "CRO",
        //     "order_id" => "367107623521528450"
        // }
        $timestamp = $this->safe_integer($trade, 't');
        if ($timestamp === null) {
            $timestamp = $this->safe_integer($trade, 'create_time');
        }
        $marketId = $this->safe_string_2($trade, 'i', 'instrument_name');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        } else if ($marketId !== null) {
            $symbol = $this->safe_symbol($marketId, $market, '_');
        }
        $price = $this->safe_number($trade, 'p');
        if ($price === null) {
            $price = $this->safe_number($trade, 'traded_price');
        }
        $amount = $this->safe_number($trade, 'q');
        if ($amount === null) {
            $amount = $this->safe_number($trade, 'traded_quantity');
        }
        $cost = $price * $amount;
        $side = strtolower($this->safe_string_2($trade, 's', 'side'));
        $id = $this->safe_string_2($trade, 'd', 'trade_id');
        $type = 'limit'; // all trades are still limit trades
        $takerOrMaker = $this->safe_string($trade, 'liquidity_indicator');
        $order = $this->safe_string($trade, 'order_id');
        $fee = null;
        $feeCost = $this->safe_number($trade, 'fee');
        if ($feeCost !== null) {
            $feeCurrency = $this->safe_string($trade, 'fee_currency');
            if ($market !== null) {
                if ($side === 'buy') {
                    $feeCurrency = $market['base'];
                } else if ($side === 'sell') {
                    $feeCurrency = $market['quote'];
                }
            }
            $fee = array(
                'currency' => $feeCurrency,
                'cost' => $feeCost,
            );
        }
        return array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'order' => $order,
            'takerOrMaker' => $takerOrMaker,
            'type' => $type,
            'fee' => $fee,
        );
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //      array("t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583)
        return array(
            $this->safe_integer($ohlcv, 't'),
            $this->safe_number($ohlcv, 'o'),
            $this->safe_number($ohlcv, 'h'),
            $this->safe_number($ohlcv, 'l'),
            $this->safe_number($ohlcv, 'c'),
            $this->safe_number($ohlcv, 'v'),
        );
    }

    public function parse_order_status($status) {
        $statuses = array(
            'ACTIVE' => 'open',
            'CANCELED' => 'canceled',
            'FILLED' => 'closed',
            'REJECTED' => 'rejected',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //       {
        //         "status" => "FILLED",
        //         "side" => "BUY",
        //         "order_id" => "371302913889488619",
        //         "client_oid" => "9_yMYJDNEeqHxLqtD_2j3g",
        //         "create_time" => 1588902489144,
        //         "update_time" => 1588902493024,
        //         "type" => "LIMIT",
        //         "instrument_name" => "ETH_CRO",
        //         "cumulative_quantity" => 7,
        //         "cumulative_value" => 7,
        //         "avg_price" => 7,
        //         "fee_currency" => "CRO",
        //         "time_in_force" => "GOOD_TILL_CANCEL",
        //         "exec_inst" => "POST_ONLY"
        //       }
        $created = $this->safe_integer($order, 'create_time');
        $updated = $this->safe_integer($order, 'update_time');
        $marketId = $this->safe_string($order, 'instrument_name');
        $symbol = $this->safe_symbol($marketId, $market);
        $amount = $this->safe_number($order, 'quantity');
        $filled = $this->safe_number($order, 'cumulative_quantity');
        $remaining = $amount - $filled;
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $id = $this->safe_string($order, 'order_id');
        $clientOrderId = $this->safe_string($order, 'client_oid');
        $price = $this->safe_number($order, 'price');
        $average = $this->safe_number($order, 'avg_price');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        $timeInForce = $this->safe_string($order, 'time_in_force');
        $postOnly = $this->safe_string($order, 'exec_inst') === 'POST_ONLY';
        $cost = 0;
        if ($status === 'closed') {
            $cost = $amount * $price;
        }
        return array(
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $created,
            'datetime' => $this->iso8601($created),
            'lastTradeTimestamp' => $updated,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'trades' => array(),
            'info' => $order,
            'cost' => $cost,
            'fee' => null,
            'average' => $average,
        );
    }

    public function parse_transaction_status_by_type($status) {
        $statuses = array(
            '0' => 'pending',
            '1' => 'ok',
            '2' => 'failed',
            '3' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        // {
        //     "currency" => "XRP",
        //     "fee" => 1.0,
        //     "create_time" => 1607063412000,
        //     "id" => "2220",
        //     "update_time" => 1607063460000,
        //     "amount" => 100,
        //     "address" => "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //     "status" => "1"
        // }
        //
        // fetchWithdrawals
        //
        // {
        //     "currency" => "XRP",
        //     "client_wid" => "my_withdrawal_002",
        //     "fee" => 1.0,
        //     "create_time" => 1607063412000,
        //     "id" => "2220",
        //     "update_time" => 1607063460000,
        //     "amount" => 100,
        //     "address" => "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //     "status" => "1"
        // }
        //
        $id = $this->safe_string($transaction, 'id');
        $address = $this->safe_string($transaction, 'address');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_integer($transaction, 'create_time');
        $status = $this->parse_transaction_status_by_type($this->safe_string($transaction, 'status'));
        $amount = $this->safe_number($transaction, 'amount');
        $txId = $this->safe_string($transaction, 'txid');
        $feeCost = $this->safe_number($transaction, 'fee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        $updated = $this->safe_integer($transaction, 'update_time');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => $address,
            'addressTo' => $address,
            'addressFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'tagFrom' => null,
            'type' => null,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'internal' => null,
            'fee' => $fee,
        );
    }
}
